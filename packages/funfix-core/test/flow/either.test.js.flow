/*
 * Copyright (c) 2017 by The Funfix Project Developers.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* @flow */

import {
  Either,
  Left,
  Right
} from "../../src/"

const optLeft: Either<number, string> = Left(1)
const optRight: Either<number, string> = Right("unu")

class Human { isHuman: boolean }
class Animal { isAnimal: boolean }
class Dog extends Animal { isDog: boolean }
class Cat extends Animal { isCat: boolean }

// Either is covariant on Left!
const animal1: Either<Animal, string> = Left(new Dog())
// $ExpectError
const dog1: Either<Dog, string> = Left(new Animal())

// Either is covariant on Right!
const animal2: Either<string, Animal> = Right(new Dog())
// $ExpectError
const dog2: Either<string, Dog> = Right(new Animal())

// Covariant behavior for getOrElse and orElse
const r21: Animal = dog2.getOrElse(new Animal())
const r22: Animal = dog2.getOrElseL(() => new Animal())
const r23: Animal = dog2.getOrElse(new Cat())
const r24: Animal = dog2.getOrElseL(() => new Cat())
const r25: Object = dog2.getOrElse(new Human())

const lDog: Either<Dog, string> = Left(new Dog())
const r26: Either<Animal, string> =
  lDog.filterOrElse(_ => _ === "not", () => new Animal())

// $ExpectError
const r27: Either<Dog, string> =
  lDog.filterOrElse(_ => _ === "not", () => new Animal())

/*
 * Copyright (c) 2017 by The Funfix Project Developers.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* @flow */

// Testing a la carte import
import type { OptionK, TypeClass } from "../../src/"
import { Option, Some, applyMixins } from "funfix-core"
import {
  Equiv,
  Functor,
  FunctorLaws,
  functorOf,
  functorLawsOf
} from "../../src/"

const erasure: Functor<any> = Functor._funErasure
const typeId: string = Functor._funTypeId
const supertypes: string[] = Functor._funSupertypeIds
const tc: TypeClass<Functor<any>> = Functor

const F: Functor<Option<any>> = functorOf(Option)
const laws: FunctorLaws<Option<any>> = functorLawsOf(F)

const opt1: OptionK<string> = F.map(Some(1), x => String(x))
const opt2: OptionK<number> = F.map(Some(1), x => x + 1)

// $ExpectError
const err1: OptionK<string> = F.map(Some(1), x => x + 1)

// $ExpectError
const err2: FunctorLaws<string> = functorLawsOf(F)

class FunctorLawsForOption implements FunctorLaws<Option<any>> {
  +F: Functor<Option<any>> = functorOf(Option);

  // Mixed-in
  covariantIdentity: <A>(fa: OptionK<A>) => Equiv<OptionK<A>>;
  covariantComposition: <A, B, C>(fa: OptionK<A>, f: (a: A) => B, g: (b: B) => C) => Equiv<OptionK<C>>;
}

applyMixins(FunctorLawsForOption, [FunctorLaws])

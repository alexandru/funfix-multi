/*
 * Copyright (c) 2017 by The Funfix Project Developers.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* @flow */

import type { Throwable } from "funfix-core"
import { Future } from "funfix-exec"
import {
  MonadError,
  monadErrorOf,
  Monad,
  monadOf,
  FlatMap,
  flatMapOf,
  ApplicativeError,
  applicativeErrorOf,
  Applicative,
  applicativeOf,
  Apply,
  applyOf,
  Functor,
  functorOf,
  FutureInstances
} from "../../src/"

const functor1: Functor<Future<any>> = functorOf(Future)
const functor2: Functor<Future<any>> = FutureInstances.global

const ap1: Apply<Future<any>> = applyOf(Future)
const ap2: Apply<Future<any>> = FutureInstances.global

const applicative1: Applicative<Future<any>> = applicativeOf(Future)
const applicative2: Applicative<Future<any>> = FutureInstances.global

const flatMap1: FlatMap<Future<any>> = flatMapOf(Future)
const flatMap2: FlatMap<Future<any>> = FutureInstances.global

const apErr1: ApplicativeError<Future<any>, any> = applicativeErrorOf(Future)
const apErr2: ApplicativeError<Future<any>, Throwable> = FutureInstances.global

const monad1: Monad<Future<any>> = monadOf(Future)
const monad2: Monad<Future<any>> = FutureInstances.global

const monadErr1: MonadError<Future<any>, any> = monadErrorOf(Future)
const monadErr2: MonadError<Future<any>, Throwable> = FutureInstances.global

/*
 * Copyright (c) 2017 by The Funfix Project Developers.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* @flow */

import { Either, Try, Option } from "funfix-core"
import {
  Future,
  Scheduler,
  ICancelable,
  IPromiseLike,
  Duration
} from "../../src/"

const fa1: Future<number> = Future.pure(1)
const fa2: Future<number> = Future.pure(1, Scheduler.global.get())
const fa3: Future<number> = Future.raise("error")
const fa4: Future<number> = Future.raise("error", Scheduler.global.get())

const p1: Promise<number> = fa1.toPromise()
const p2: Promise<number> = Future.raise("error").toPromise()

const cRef: ICancelable = Future.pure(1)
const it1: IPromiseLike<number> = Future.pure(1)
const it2: IPromiseLike<number> = Future.pure(1)

const t1: Future<number> = Future.pure(1).then()
const t2: Future<number> = Future.pure(1).then(x => x + 1)
const t3: Future<number> = Future.pure(1).then(undefined, _ => 100)

const then1: Future<string> = fa1.then(a => String(a))
const then2: Future<number> = fa1.then(a => Future.pure(a))
// $ExpectError
const then3: number = fa1.then(a => Future.pure(a))

const opt1: Option<Try<number>> = then2.value()
then2.onComplete((a: Try<number>) => { console.info(a) })
// $ExpectError
then2.onComplete((a: Try<string>) => { console.info(a) })
then2.cancel()

const tr1: Future<string> = fa1.transform(e => String(e), a => String(a))
const tr2: Future<string> = fa1.transformWith(Future.raise, a => Future.pure(String(a)))
const tr3: Future<Either<any, number>> = fa1.attempt()

const fl1: Future<string> = fa1.map(n => String(n))
const fl2: Future<string> = fa1.flatMap(n => Future.pure(String(n)))

// Variance
class Human { isHuman: boolean }
class Animal { isAnimal: boolean }
class Dog extends Animal { isDog: boolean }
class Cat extends Animal { isCat: boolean }

const cv1: Future<Animal> = Future.pure(new Dog)
const cv2: Future<Animal> = Future.pure(new Dog).recover(e => new Cat)
const cv3: Future<Animal> = Future.pure(new Dog).recoverWith(e => Future.pure(new Cat))

// $ExpectError
const cve1: Future<Dog> = Future.pure(new Animal)
// $ExpectError
const cve2: Future<Cat> = Future.pure(new Dog)
// $ExpectError
const cve3: Future<Dog> = Future.pure(new Dog).recover(_ => new Cat)
// $ExpectError
const cve4: Future<Dog> = Future.pure(new Dog).recoverWith(_ => Future.pure(new Cat))

const tick1: Future<void> = Future.delayedTick(1000)
const tick2: Future<void> = Future.delayedTick(1000, Scheduler.global.get())
const tick3: Future<void> = Future.delayedTick(Duration.of(1000))
const tick4: Future<void> = Future.delayedTick(Duration.of(1000), Scheduler.global.get())

const delay1: Future<number> = Future.pure(1).delayResult(1000)
const delay2: Future<number> = Future.pure(1).delayResult(Duration.of(1000))

const arr: Future<number>[] = [delay1, delay2]
const all1: Future<number[]> = Future.sequence(arr)
const all2: Future<number[]> = Future.sequence(arr, Scheduler.global.get())

const m2: Future<number> = Future.map2(
  Future.pure(1), Future.pure(2),
  (a, b) => a + b)
const m3: Future<number> = Future.map3(
  Future.pure(1), Future.pure(2), Future.pure(3),
  (a, b, c) => a + b + c)
const m4: Future<number> = Future.map4(
  Future.pure(1), Future.pure(2), Future.pure(3), Future.pure(4),
  (a, b, c, d) => a + b + c + d)
const m5: Future<number> = Future.map5(
  Future.pure(1), Future.pure(2), Future.pure(3), Future.pure(4), Future.pure(5),
  (a, b, c, d, e) => a + b + c + d + e)
const m6: Future<number> = Future.map6(
  Future.pure(1), Future.pure(2), Future.pure(3), Future.pure(4), Future.pure(5), Future.pure(6),
  (a, b, c, d, e, f) => a + b + c + d + e + f)

const me2: Future<number> = Future.map2(
  Future.pure(1), Future.pure(2),
  (a, b) => a + b,
  Scheduler.global.get())
const me3: Future<number> = Future.map3(
  Future.pure(1), Future.pure(2), Future.pure(3),
  (a, b, c) => a + b + c,
  Scheduler.global.get())
const me4: Future<number> = Future.map4(
  Future.pure(1), Future.pure(2), Future.pure(3), Future.pure(4),
  (a, b, c, d) => a + b + c + d,
  Scheduler.global.get())
const me5: Future<number> = Future.map5(
  Future.pure(1), Future.pure(2), Future.pure(3), Future.pure(4), Future.pure(5),
  (a, b, c, d, e) => a + b + c + d + e,
  Scheduler.global.get())
const me6: Future<number> = Future.map6(
  Future.pure(1), Future.pure(2), Future.pure(3), Future.pure(4), Future.pure(5), Future.pure(6),
  (a, b, c, d, e, f) => a + b + c + d + e + f,
  Scheduler.global.get())

const ft1: Future<number> = Future.pure(1).timeout(1000)
const ft2: Future<number> = Future.pure(1).timeout(Duration.of(1000))
const ft3: Future<number | string> = Future.pure(1).timeoutTo(1000, () => Future.pure("Hello!"))
const ft4: Future<number | string> = Future.pure(1).timeoutTo(Duration.of(1000), () => Future.pure("Hello!"))
const ft5: Future<number> = Future.firstCompletedOf(arr)
const ft6: Future<number> = Future.firstCompletedOf(arr, Scheduler.global.get())

const arr2 = [1, 2, 3]
const tAll1: Future<number[]> = Future.traverse(arr2)(Future.pure)
const tAll2: Future<number[]> = Future.traverse(arr2, 2)(Future.pure)
const tAll3: Future<number[]> = Future.traverse(arr2, 2, Scheduler.global.get())(Future.pure)
const tAll4: Future<string[]> = Future.traverse(arr2)(x => Future.pure(x.toString()))
